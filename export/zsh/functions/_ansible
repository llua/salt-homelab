#compdef -P ansible(|-doc|-playbook|-pull)
# poor man's attempt of parsing the hosts file, may do interesting things.
# zstyle -e ':completion::complete:ansible*:*' hosts 'reply=( ${(m)${${${${(f)"$(</etc/ansible/hosts)"}%% *}#\[}%\]}%%*(:vars|=*)} )'
#
# packaged versions of ansible 1.7.2 on FreeBSD and openSUSE should just work.
# 1.8.x will resort to parsing ansible-doc for module names, which is slow but can be cached.
# zstyle ':completion:*:ansible(|-doc):*' use-cache true

__ansible() {
  _arguments -s -w : \
    '(-v --verbose)'{-v,--verbose}'[verbose mode]' \
    '(-i --inventory)'{-i+,--inventory=-}'[specify inventory file]:inventory file:_files' \
    '(-f --forks)'{-f+,--forks=-}'[level of parallelism]: : _message "number of concurrent runs"' \
    '--private-key=-[authenticate key]: : _files' \
    '(-m --module-name)'{-m+,--module-name=-}'[execute module]: :__ansible_modules' \
    '(-M --module-path)'{-M+,--module-path=-}'[module path]:module path:_files -/' \
    '(-a --args)'{-a+,--args=-}'[arguments for module]: : _message "arguments"' \
    '(-k --ask-pass)'{-k,--ask-pass}'[prompt for ssh password]' \
    '(-K --ask-sudo-pass)'{-K,--ask-sudo-pass}'[prompt for sudo password]' \
    '(-o --one-line)'{-o,--one-line}'[output everything on one line]' \
    '(-s --sudo)'{-s,--sudo}'[escalate privileges to root]' \
    '(-t --tree)'{-t+,--tree=-}'[save contents in directory]: : _files -/' \
    '(-T --timeout)'{-T+,--timeout=-}'[specify connection timeout]: : _message "timeout, in seconds"' \
    '(-B --background)'{-B+,--background=-}'[run commands in background, with timeout]: : _message "timeout, in seconds"' \
    '(-P --poll)'{-P+,--poll=-}'[poll background jobs]: : _message "polling rate, in seconds"' \
    '(-u --user)'{-u+,--user=-}'[specify remote user]:remote user:_users' \
    '(-U --sudo-user)'{-U+,--sudo-user=-}'[user to sudo to]: : _users' \
    '(-c --connection)'{-c+,--connection=-}'[connection type]:connection type:(paramiko ssh local)' \
    '(-l --limit)'{-l+,--limit=-}'[apply limits on host/group pattern]: : _message "subset or ~REGEX"' \
    '1:host or group:_hosts'
}

__ansible-playbook() {
  _arguments -s -w : \
    '(-v --verbose)'{-v,--verbose}'[verbose mode]' \
    '(-i --inventory)'{-i+,--inventory=-}'[specify inventory file]:inventory file:_files' \
    '(-f --forks)'{-f+,--forks=-}'[level of parallelism]: : _message "number of concurrent runs"' \
    '(-M --module-path)'{-M+,--module-path=-}'[module path]:module path:_files -/' \
    '(-k --ask-pass)'{-k,--ask-pass}'[prompt for ssh password]' \
    '(-K --ask-sudo-pass)'{-K,--ask-sudo-pass}'[prompt for sudo password]' \
    '(-s --sudo)'{-s,--sudo}'[escalate privileges to root]' \
    '(-t --tag)'{-t+,--tag=-}'[only run plays and tasks tagged with these values]: : _message "skip tags"' \
    '(-T --timeout)'{-T+,--timeout=-}'[specify connection timeout]: : _message "timeout, in seconds"' \
    '(-u --user)'{-u+,--user=-}'[specify default remote user]:remote user:_users' \
    '(-U --sudo-user)'{-U+,--sudo-user=-}'[user to sudo to]: : _users' \
    '(-c --connection)'{-c+,--connection=-}'[connection type]:connection type:(paramiko ssh local)' \
    '(-l --limit)'{-l+,--limit=-}'[apply limits on host/group pattern]: : _message "subset"' \
    '(-e --extra-vars)'{-e,--extra-vars}'[inject extra variables into playbook]: : _message "variables, key=value form"' \
    '--skip-tags=-[run plays not matching this tag(s)]: : _message "tags"' \
    '--check[test resources to see what might have changed]' \
    '--syntax-check[look for syntax errors in the playbook, but not run anything]' \
    '--diff[show the unified diffs of what changed in any templated files]' \
    '*:ansible playbook:_files'
}

__ansible-doc() {
  _arguments -s -w : \
    '(-M --module-path)'{-M+,--module-path=-}'[module path]:module path:_files -/' \
    '(-s --snippet)'{-s,--snippet}'[produce a snippet which can be copied into a playbook for modification]' \
    '(-l --list)'{-l,--list}'[produce a terse listing of modules and a short description of each]' \
    '*: :__ansible_modules'
}

__ansible-pull() {
  _arguments -s -w : \
    '(-d --directory)'{-d,--directory=-}'[destination for checked out repository]: : _files -/' \
    '(-U --url)'{-u,--url=-}'[url of the playbook repository]: : _urls' \
    '(-C --checkout)'{-C,--checkout=-}'[branch/tag/commit to checkout]:branch/tag/commit' \
    '(-f --force)'{-f,--force}'[force the run of the playbook]' \
    '(-i --inventory)'{-i+,--inventory=-}'[specify inventory file]:inventory file:_files' \
    '--purge[purge the checkout after the playbook is ran]' \
    '(-m --module-name)'{-m+,--module-name=-}'[module used to checkout playbook repository]: :__ansible_modules' \
    '(-o --only-if-changed)'{-o,--only-if-changed}'[run the playbook only if the repository has changed]' \
    '1:playbook:_files'
}

__ansible_modules() {
  local mdir ansible_modules expl; expl=( "$@" )

  if ! zstyle -T ":completion:$curcontext:" cache-policy; then
    zstyle ":completion:$curcontext:" cache-policy _ansible_caching_policy
  fi

  if (( words[(I)--module-path=*] )); then
    mdir=${words[(R)--module-path=*]#--module-path=}
    ansible_modules=( $mdir/*(N:t:r) )
  elif (( words[(I)-M*] )); then
    if (( $#words[(R)-M*] > 2 )); then
      mdir=${words[(R)-M*]#-M}
    else
      mdir=${words[words[(i)-M] + 1]}
    fi
    [[ -d $mdir ]] || return 1
    ansible_modules=( $mdir/*(N:t:r) )
  elif [[ -n $ANSIBLE_LIBRARY ]]; then
    [[ -d $ANSIBLE_LIBRARY ]] || return 1
    ansible_modules=( $ANSIBLE_LIBRARY/*(N:t:r) )
  elif zstyle -s ":completion:$curcontext:*" ansible_modules mdir && [[ -n $mdir ]]; then
    [[ -d $mdir ]] || return 1
    ansible_modules=( $mdir/*(N:t:r) )
  elif [[ -d /usr/share/ansible ]]; then
    ansible_modules=( /usr/share/ansible/**/*(.N:t:r) )
  elif [[ -d /usr/local/share/ansible ]]; then
    ansible_modules=( /usr/local/share/ansible/**/*(.N:t:r) )
  elif _cache_invalid ansible_modules || ! _retrieve_cache ansible_modules; then
      local k v
      </dev/tty 2>/dev/null command ansible-doc -l | while read -r k v; do
        [[ $k == (DEPRECATED:|) ]] && continue
        ansible_modules+=("${k}[$v]")
      done
      _store_cache ansible_modules ansible_modules
  fi

  if (( $#ansible_modules )); then
    typeset -U ansible_modules; ansible_modules=( ${(@m)ansible_modules##*__init__*} )
    _values -O expl -w 'modules' "${ansible_modules[@]}"
  fi
}

_ansible_caching_policy() {
  local -a oldp
  oldp=( "$1"(Nm+7) )
  (( $#oldp ))
}

_ansible() {
  local ret
  _call_function ret "__$service" && return ret
}

_ansible "$@"
